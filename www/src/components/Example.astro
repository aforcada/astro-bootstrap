---
// const codeSlot = await Astro.slots.render('code')
import { Code } from 'astro/components';
const codeSlot = await Astro.slots.render('code');
---

<div class="container-fluid border rounded g-0 mb-3 example__container">
  {
    Astro.slots.has('component') && (
      <div class="row p-3">
        <div class="col example__rendered">
          <slot name="component" />
        </div>
      </div>
    )
  }
  <div class="row">
    <div class="col">
      <div
        class="example__code-header bg-dark text-white border-top border-bottom d-flex align-items-center ps-3 pe-2 py-1"
      >
        <small class="font-monospace text-muted text-uppercase"
          >Astro file</small
        >
        <div class="d-flex ms-auto">
          <button type="button" class="btn-copy">
            <div class="svg-clipboard">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="16"
                height="16"
                fill="currentColor"
                class="bi bi-clipboard"
                viewBox="0 0 16 16"
              >
                <path
                  d="M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z"
                ></path>
                <path
                  d="M9.5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3z"
                ></path>
              </svg>
            </div>
            <div class="svg-clipboard-check d-none">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="16"
                height="16"
                fill="currentColor"
                class="bi bi-clipboard-check"
                viewBox="0 0 16 16"
              >
                <path
                  fill-rule="evenodd"
                  d="M10.854 7.146a.5.5 0 0 1 0 .708l-3 3a.5.5 0 0 1-.708 0l-1.5-1.5a.5.5 0 1 1 .708-.708L7.5 9.793l2.646-2.647a.5.5 0 0 1 .708 0z"
                ></path>
                <path
                  d="M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z"
                ></path>
                <path
                  d="M9.5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3z"
                ></path>
              </svg>
            </div>
          </button>
        </div>
      </div>
    </div>
  </div>
  <div class="row">
    <div class="col example__code">
      <Code code={codeSlot} lang="astro" />
    </div>
  </div>
</div>
<style is:global>
  /* has to be global as without, is scoped to only this component */
  .astro-code {
    padding: 1rem;
    margin-bottom: 0;
  }
  .breadcrumb {
    margin-bottom: 0;
  }
</style>
<style is:global>
  .btn-copy {
    display: block;
    padding: 0.5em;
    line-height: 1;
    color: var(--bs-body-color);
    background-color: transparent;
    border: 0;
    border-radius: 0.25rem;
  }
</style>
<script>
  import Tooltip from 'bootstrap/js/dist/tooltip';
  import Clipboard from 'clipboard';
  (() => {
    'use strict';

    const btnTitle = 'Copy to clipboard';
  /**
     * @description toggles class d-none for two div's
     * @param {string} selector
     * @param {string} title
     */
    function swapIcons(selector1, selector2) {
      document.querySelector(selector1).classList.toggle('d-none');
      document.querySelector(selector2).classList.toggle('d-none');
    }
    /**
     * @description adds tooltip to a div
     * @param {string} selector
     * @param {string} title
     */
    function snippetButtonTooltip(selector: string, title: string) {
      document.querySelectorAll(selector).forEach((btn) => {
        Tooltip.getOrCreateInstance(btn, { title, placement: 'left' });
      });
    }
    snippetButtonTooltip('.btn-copy', btnTitle);

    const clipboard = new Clipboard('.btn-copy', {
      target: (trigger) =>
        trigger.closest('.example__container').querySelector('.astro-code'),
    });

    clipboard.on('success', (event) => {
      const tooltipBtn = Tooltip.getInstance(event.trigger);
      if (tooltipBtn) {
        // toggle tooltip title
        tooltipBtn.setContent({ '.tooltip-inner': 'Copied!' });
        // toggle back
        event.trigger.addEventListener(
          'hidden.bs.tooltip',
          () => {
            tooltipBtn.setContent({ '.tooltip-inner': btnTitle });
          },
          { once: true },
        );
        // delect text that was selected by clipboard.js
        event.clearSelection();

        // toggle visibility of two icons
        swapIcons('.svg-clipboard', '.svg-clipboard-check');
        // toggle back with timer
        setTimeout(() => {
          swapIcons('.svg-clipboard', '.svg-clipboard-check');
          tooltipBtn.hide();
        }, 2000);
      }
    });

    clipboard.on('error', (event) => {
      // display 'press Ctrl-c to copy message on error'
      const modifierKey = /mac/i.test(navigator.userAgent) ? '\u2318' : 'Ctrl-';
      const fallbackMsg = `Press ${modifierKey}C to copy`;
      const tooltipBtn = Tooltip.getInstance(event.trigger);
      if (tooltipBtn) {
        tooltipBtn.setContent({ '.tooltip-inner': fallbackMsg });
        event.trigger.addEventListener(
          'hidden.bs.tooltip',
          () => {
            tooltipBtn.setContent({ '.tooltip-inner': btnTitle });
          },
          { once: true },
        );
      }
    });
  })();
</script>
